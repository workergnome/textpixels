#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'open3'

require 'textpixels'

include TextPixels

opts = {
  files_from: ARGF, # Where to find files (Filehandle = read names, Directory name = Git repo)
  style: 'fruity', # Pygments style name ; NONE = no Pygments styles
  cols: 80, # columns
  alpha?: false, # use transparency for empty space
  finish: nil, # last phase to run
  loadstate: nil, # load saved state from this file
  savestate: nil, # save state to this file (Use with :finish)
  fg: 'ffffffff', # default foreground (= #ffffff fully opaque)
  bg: '00000000', # default background (= #000000 fully transparent)
  skipunknown: false, # skip files whose types can't be identified
  linelimit: nil, # maximum number of lines to render
  blitphase: 'magick', # What to run as the bit-blitting phase
  crop: '1920x+0+0', # Final image crop (none if nil)
  out: 'x:', # Default to show on-screen
  height: 1080, # Default screen height
  lang_as: [], # Use GitHub language color as these default CSS props
}

OptionParser.new do |o|
  o.on('--files FILES', '--repo REPO') { |files| opts[:files_from] = files }
  o.on('--cols N') { |cols| opts[:cols] = cols }
  o.on('--transparent', '--alpha') { opts[:alpha?] = true }
  o.on('--solid', '--no-alpha') { opts[:alpha?] = false }
  o.on('--style STYLE') { |style| opts[:style] = style == 'NONE' ? nil : style }
  o.on('--finish PHASE') { |phase| opts[:finish] = phase }
  o.on('--load FILE') { |file| opts[:loadstate] = file }
  o.on('--save FILE') { |file| opts[:savestate] = file }
  o.on('--known', '--skip-unknown') { opts[:skipunknown] = true }
  o.on('--lines MAX', Integer) { |max| opts[:linelimit] = max }
  o.on('--out IMAGEFILE') { |file| opts[:out] = file }
  o.on('--size WxH') do |dims|
    w,h = dims.split('x')
    opts[:height] = h.to_i
    opts[:crop] = "#{w}x+0+0"
  end
  o.on('--crop DIMS') { |opts| opts[:crop] = dims }
  o.on('--no-crop') { opts[:crop] = nil }
  o.on('--raw') { opts[:blitphase] = 'blit' }
  o.on('--height N', Integer) { |n| opts[:height] = n }
  o.on('--long') { opts[:height] = nil ; opts[:crop] = nil }
  o.on('--fg COLOR', '--default-fg COLOR') { |color| opts[:fg] = color }
  o.on('--bg COLOR', '--default-bg COLOR') { |color| opts[:bg] = color }
  o.on('--lang-as PROPS') { |props| opts[:lang_as] = props.split(/[,\s]/) }
end.parse!(ARGV)

opts = OpenStruct.new(opts)
phases = %w[findfiles identify htmlize pixelate] + [opts.blitphase]

main(opts, phases) #if caller.empty?

